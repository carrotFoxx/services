{
	"info": {
		"_postman_id": "46d21ca7-f5e8-4a86-be91-c31f9e2330f9",
		"name": "Buldozer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "applications",
			"item": [
				{
					"name": "list apps",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/applications",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "create app",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2664c8dc-7d59-4689-8f06-a535bc319c95",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"scn_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"tests[\"Etag is greater then 0\"] = scn_version > 0;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"ver\", scn_version);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"test\",\n\t\"description\":\"sample app for test\",\n\t\"package\":\"busybox:latest\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/applications",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "get app",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b880f17-5bcf-41c1-8928-0bb3cd0a0bcc",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"scn_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"tests[\"Etag is greater then 0\"] = scn_version > 0;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/applications/{{app-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications",
								"{{app-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put app",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ca94775-4d53-47fa-9efa-2dcb80736f89",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"scn_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"tests[\"Etag is greater then 0\"] = scn_version > 0;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-if-version",
								"value": "{{app-mgr.last-created-ver}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"consul sync test\",\n\t\"description\":\"sample app for test\",\n\t\"package\":\"buldozer_subordinate:latest\",\n\t\"environment\":{\n\t\t\"LOG_LEVEL\":\"DEBUG\",\n\t\t\"BDZ_PROGRAM\":\"cat\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/applications/{{app-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications",
								"{{app-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get app versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71bc64d7-78f0-4e60-a497-32669df8d806",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/applications/{{app-mgr.last-created-uid}}/versions",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications",
								"{{app-mgr.last-created-uid}}",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "commit app version to archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ca361d3-7a87-4d0c-8183-e61ed47d1465",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"etag_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Etag is greater then 0\"] = etag_version > 0;",
									"tests[\"Response has version\"] = jsonData.version !== undefined",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"pm.environment.set(ENV_PREFIX + 'ver', jsonData.version)"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "x-if-version",
								"value": "{{app-mgr.last-created-ver}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/applications/{{app-mgr.last-created-uid}}/commit",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications",
								"{{app-mgr.last-created-uid}}",
								"commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "get app version by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25380d9d-26a5-4041-917f-3a4ab7bcaec9",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload is object\"] = Object.isPrototypeOf(jsonData)",
									"tests[\"Payload has version as in request\"] = jsonData.version == pm.environment.get(ENV_PREFIX+'ver')"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/applications/{{app-mgr.last-created-uid}}/versions/{{app-mgr.last-created-ver}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications",
								"{{app-mgr.last-created-uid}}",
								"versions",
								"{{app-mgr.last-created-ver}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload app artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b81bd54b-0cc2-4a1f-9ad8-6787df7ed3d8",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"etag_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Etag is greater then 0\"] = etag_version > 0;",
									"tests[\"Response has version\"] = jsonData.version !== undefined",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"pm.environment.set(ENV_PREFIX + 'ver', jsonData.version)"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{http-api}}/applications/{{app-mgr.last-created-uid}}/upload",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"applications",
								"{{app-mgr.last-created-uid}}",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "models",
			"item": [
				{
					"name": "list models",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/models",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "create model",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4205265e-691b-4f5a-91ef-7dcd72006c80",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'model-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"scn_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"tests[\"Etag is greater then 0\"] = scn_version > 0;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"ver\", scn_version);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"test\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/models",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "get model",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d25ae904-86fb-4f35-8a9c-03235708b755",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'model-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"scn_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"tests[\"Etag is greater then 0\"] = scn_version > 0;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/models/{{model-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"models",
								"{{model-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "commit model version to archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6f6d274-ba46-408f-b4b3-4abe93d91745",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'model-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"etag_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Etag is greater then 0\"] = etag_version > 0;",
									"tests[\"Response has version\"] = jsonData.version !== undefined",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"pm.environment.set(ENV_PREFIX + 'ver', jsonData.version)"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "x-if-version",
								"value": "{{model-mgr.last-created-ver}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/models/{{model-mgr.last-created-uid}}/commit",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"models",
								"{{model-mgr.last-created-uid}}",
								"commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload model artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b32ff22-6e66-473b-9373-5b8de18526f5",
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"etag_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Etag is greater then 0\"] = etag_version > 0;",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{http-api}}/models/{{model-mgr.last-created-uid}}/upload",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"models",
								"{{model-mgr.last-created-uid}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "download model artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf7505e0-2325-4c26-82b1-f789dcf685c3",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'app-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"etag_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Etag is greater then 0\"] = etag_version > 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/models/{{model-mgr.last-created-uid}}/versions/{{model-mgr.last-created-ver}}/download",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"models",
								"{{model-mgr.last-created-uid}}",
								"versions",
								"{{model-mgr.last-created-ver}}",
								"download"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "images",
			"item": [
				{
					"name": "create analyzer image",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'img-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"tests[\"ETag is present\"] = postman.getResponseHeader(ETAG);",
									"tests[\"ETag is numeric\"] = /^\\d+$/.test(postman.getResponseHeader(ETAG));",
									"",
									"scn_version = parseInt(postman.getResponseHeader(ETAG))",
									"",
									"tests[\"Etag is greater then 0 or equal\"] = scn_version >= 0;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"ver\", scn_version);"
								],
								"id": "bd571b89-1ef7-454f-b5cd-ab47237037ea"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"test\",\n\t\n\t\"app_id\":\"{{app-mgr.last-created-uid}}\",\n\t\"app_ver\":\"{{app-mgr.last-created-ver}}\",\n\t\n\t\"model_id\":\"{{model-mgr.last-created-uid}}\",\n\t\"model_ver\":\"{{model-mgr.last-created-ver}}\",\n\t\n\t\"description\":\"\",\n\t\"tags\":[\n\t\t\"test_tag_1\",\"test_tag_2\"\n\t\t],\n\t\"params\":[\n\t\t{\n\t\t\t\"name\":\"param1\",\n\t\t\t\"type\":\"type1\",\n\t\t\t\"value\":\"value1\"\n\t\t}\n\t\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/images",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete analyzer image",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "X-If-Version",
								"value": "{{img-mgr.last-created-ver}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/images/{{img-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"images",
								"{{img-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "list analyzer images",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'img-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');"
								],
								"id": "42b84ebc-6415-47fe-bdc4-50b5b3158336"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{http-api}}/images",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "get analyzer image",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/images/{{img-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"images",
								"{{img-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update analyzer image",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Name changed\"] = jsonData.name == \"test_updated\";",
									""
								],
								"id": "2d20f4b9-1fa4-474e-b11d-3ae099bde062"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-If-Version",
								"value": "{{img-mgr.last-created-ver}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"test_updated\",\n\t\n\t\"app_id\":\"{{app-mgr.last-created-uid}}\",\n\t\"app_ver\":\"{{app-mgr.last-created-ver}}\",\n\t\n\t\"model_id\":\"{{model-mgr.last-created-uid}}\",\n\t\"model_ver\":\"{{model-mgr.last-created-ver}}\",\n\t\n\t\"description\":\"\",\n\t\"tags\":[\n\t\t\"test_tag_1\",\"test_tag_2\"\n\t\t],\n\t\"params\":[\n\t\t{\n\t\t\t\"name\":\"param1\",\n\t\t\t\"type\":\"type1\",\n\t\t\t\"value\":\"value1\"\n\t\t}\n\t\t]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/images/{{img-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"images",
								"{{img-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "commit analyzer image to archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d5366f0-331d-4085-b928-f8a6250f35a2",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'img-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"scn_version = jsonData.version;",
									"",
									"tests[\"Etag is greater or equal than 0\"] = scn_version >= 0;",
									"",
									"tests[\"Version is greater than 0\"] = scn_version > postman.getEnvironmentVariable(ENV_PREFIX + \"ver\");",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"ver\", scn_version);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-If-Version",
								"value": "{{img-mgr.last-created-ver}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/images/{{img-mgr.last-created-uid}}/commit",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"images",
								"{{img-mgr.last-created-uid}}",
								"commit"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "workspaces",
			"item": [
				{
					"name": "create workspace Producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d808840-2a55-4a3c-8eca-b1a0032af3ec",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'wsp-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"A\",\n\t\n\t\"type\":\"producer\",\n\t\n\t\"app_id\":\"{{app-mgr.last-created-uid}}\",\n\t\"app_ver\":\"{{app-mgr.last-created-ver}}\",\n\t\n\t\"model_id\":\"{{model-mgr.last-created-uid}}\",\n\t\"model_ver\":\"{{model-mgr.last-created-ver}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "create workspace Consumer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07f603fb-14a5-4b16-b9ba-b1ec7ca8e03f",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'wsp-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"H\",\n\t\n\t\"type\":\"consumer\",\n\t\n\t\"app_id\":\"{{app-mgr.last-created-uid}}\",\n\t\"app_ver\":\"{{app-mgr.last-created-ver}}\",\n\t\n\t\"model_id\":\"{{model-mgr.last-created-uid}}\",\n\t\"model_ver\":\"{{model-mgr.last-created-ver}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "create workspace Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "652462e8-b852-4d6d-8955-b7f4dd99741e",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'wsp-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"M\",\n\t\n\t\"type\":\"workspace\",\n\t\n\t\"app_id\":\"{{app-mgr.last-created-uid}}\",\n\t\"app_ver\":\"{{app-mgr.last-created-ver}}\",\n\t\n\t\"model_id\":\"{{model-mgr.last-created-uid}}\",\n\t\"model_ver\":\"{{model-mgr.last-created-ver}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync create workspace Producer ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e345e6f9-19da-4cf8-9f56-29a539181882",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'wsp-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"A\",\n\t\n\t\"type\":\"producer\",\n\t\n\t\"app_id\":\"{{app-mgr.last-created-uid}}\",\n\t\"app_ver\":\"{{app-mgr.last-created-ver}}\",\n\t\n\t\"model_id\":\"{{model-mgr.last-created-uid}}\",\n\t\"model_ver\":\"{{model-mgr.last-created-ver}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces/sync",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"sync"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete workspace",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "list workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62e362db-7383-4a89-8728-f07112dba5e7",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'wsp-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{http-api}}/workspaces",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "get workspace",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get workspace health",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}:8102/workspaces/{{wsp-mgr.last-created-uid}}/health",
							"host": [
								"{{http-api}}"
							],
							"port": "8102",
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "get workspace route conf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}/route",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}",
								"route"
							]
						}
					},
					"response": []
				},
				{
					"name": "get workspace neighbors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}/neighbors",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}",
								"neighbors"
							]
						}
					},
					"response": []
				},
				{
					"name": "get workspaces chain",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"url": {
							"raw": "{{http-api}}/workspaces/chain",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"chain"
							]
						}
					},
					"response": []
				},
				{
					"name": "put workspace route conf Producer",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"outgoing_stream\": \"outgoing\",\n\t\"pause_stream\": \"true\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}/route",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}",
								"route"
							]
						}
					},
					"response": []
				},
				{
					"name": "put workspace route conf Consumer",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"incoming_stream\": \"incoming\",\n\t\"pause_stream\": \"true\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}/route",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}",
								"route"
							]
						}
					},
					"response": []
				},
				{
					"name": "put workspace route conf Workspace",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"incoming_stream\": \"3\", \n\t\"outgoing_stream\": \"4\",\n\t\"pause_stream\": \"false\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/workspaces/{{wsp-mgr.last-created-uid}}/route",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"workspaces",
								"{{wsp-mgr.last-created-uid}}",
								"route"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "manifest",
			"item": [
				{
					"name": "create manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c29d5d51-ad4c-4c87-a95e-2db79440c895",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'mnft-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Payload has uid\"] = jsonData.uid !== undefined;",
									"",
									"postman.setEnvironmentVariable(ENV_PREFIX + \"uid\", jsonData.uid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uid\": \"f6f96f0656ce4b0e927598d541c85352\",\n  \"properties\": {\n      \n      \"name\": \"A\"\n  },\n  \"resources\": [\n  {\n      \"label\": \"MyAwesomeWorkspace\",\n      \"class_\": \"producer\",      \n      \n      \"properties\": {\n        \n        \"name\": \"abc\",\n        \"application\": {\"id\":  \"{{app-mgr.last-created-uid}}\", \"version\": 1},\n        \"model\": {\"id\":  \"{{model-mgr.last-created-uid}}\", \"version\": 1},\n        \"pause_stream\": \"false\"\n      },\n      \"routes\": {       \n        \"outgoing\": [{\"ref\":  \"SomeChannel\"}]\n      }\n    },\n    {\n      \"label\": \"MyNiceWorkspace\",\n      \"class_\": \"workspace\",      \n      \"uid\": \"1234\",\n      \"properties\": {\n        \n        \"name\": \"cba\",\n        \"application\": {\"id\":  \"{{app-mgr.last-created-uid}}\", \"version\": 1},\n        \"model\": {\"id\":  \"{{model-mgr.last-created-uid}}\", \"version\": 1},\n        \"pause_stream\": \"true\"\n      },\n      \"routes\": {\n        \"incoming\": [{\"ref\":  \"SomeChannel\"}],\n        \"outgoing\": [{\"ref\":  \"SomeChannel2\"}]\n      }\n    },\n    {\n      \"label\": \"SomeChannel\",\n      \"class_\": \"channel\",\n      \n      \"properties\": {\n        \"name\": \"21\",\n        \"kafka_topic\": \"topic-name\"\n      }\n      \n    },\n    {\n      \"label\": \"SomeChannel2\",\n      \"class_\": \"channel\",\n      \n      \"properties\": {\n        \"name\": \"213\",\n        \"kafka_topic\": \"topic-name2\"\n      }\n      \n    }\n  ]\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/scripts",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts"
							]
						}
					},
					"response": []
				},
				{
					"name": "list manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95061477-c098-4d5d-b7f2-c96229166a00",
								"exec": [
									"var ETAG = 'X-Version',",
									"    ENV_PREFIX = 'wsp-mgr.last-created-'",
									"",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Content-Type is json\"] = (postman.getResponseHeader(\"Content-Type\").split(';')[0] == 'application/json');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{http-api}}/scripts",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8b21278-f01a-4d1a-9310-7f69bbc6b09e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/scripts/{{mnft-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts",
								"{{mnft-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55c78e32-a24c-4efe-b134-4cd9c7beeb1d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/scripts/health/{{mnft-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts",
								"health",
								"{{mnft-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c60fff3-dd4b-4713-993c-ad59d5e435e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uid\": \"f6f96f0656ce4b0e927598d541c85352\",\n  \"properties\": {\n    \"name\": \"A\"\n  },\n  \"resources\": [\n    {\n      \"label\": \"MyAwesomeWorkspace\",\n      \"class_\": \"workspace\",      \n      \"properties\": {       \n        \"name\": \"abc\",\n        \"application\": {\n          \"id\": \"{{app-mgr.last-created-uid}}\",\n          \"version\": 1\n        },\n        \"model\": {\n          \"id\": \"{{model-mgr.last-created-uid}}\",\n          \"version\": 1\n        },\n        \"pause_stream\": \"true\"\n      },\n      \"routes\": {\n        \"outgoing\": [\n          {\n            \"ref\": \"SomeChannel\"\n          }\n        ],\n        \"incoming\": [\n          {\n            \"ref\":  \"SomeChannel\"\n          }\n          ]\n      }\n    },\n    {\n      \"label\": \"MyNiceWorkspace\",\n      \"class_\": \"workspace\",      \n      \"uid\": \"123\",\n      \"properties\": {\n        \n        \"name\": \"cba545\",\n        \"application\": {\"id\":  \"{{app-mgr.last-created-uid}}\", \"version\": 1},\n        \"model\": {\"id\":  \"{{model-mgr.last-created-uid}}\", \"version\": 1},\n        \"pause_stream\": \"false\"\n      },\n      \"routes\": {\n        \"incoming\": [{\"ref\":  \"SomeChannel\"}],\n        \"outgoing\": [{\"ref\":  \"SomeChannel2\"}]\n      }\n    },\n    {\n      \"label\": \"NewWorkspace\",\n      \"class_\": \"workspace\",\n      \"uid\": \"12345\",\n      \"properties\": {\n        \n        \"name\": \"cba\",\n        \"application\": {\n          \"id\": \"{{app-mgr.last-created-uid}}\",\n          \"version\": 1\n        },\n        \"model\": {\n          \"id\": \"{{model-mgr.last-created-uid}}\",\n          \"version\": 1\n        },\n        \"pause_stream\": \"true\"\n      },\n      \"routes\": {\n        \"incoming\": [\n          {\n            \"ref\": \"SomeChannel\"\n          }\n        ],\n        \"outgoing\": [\n          {\n            \"ref\": \"SomeChannel2\"\n          }\n        ]\n      }\n    },\n    {\n      \"label\": \"SomeChannel\",\n      \"class_\": \"channel\",\n      \"properties\": {\n        \"name\": \"21\",\n        \"kafka_topic\": \"topic-name 1122\"\n      }\n    },\n    {\n      \"label\": \"SomeChannel2\",\n      \"class_\": \"channel\",\n      \"properties\": {\n        \"name\": \"213\",\n        \"kafka_topic\": \"topic-name2\"\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{http-api}}/scripts/{{mnft-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts",
								"{{mnft-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put manifest 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a2277f8-8dc3-48f7-b070-2a4adfd47ce4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"uid\": \"f6f96f0656ce4b0e927598d541c85352\",\n  \"properties\": {\n    \"name\": \"A\"\n  },\n  \"resources\": [\n    {\n      \"label\": \"MyAwesomeWorkspace\",\n      \"clss\": \"producer\",\n      \"uid\": \"123\",\n      \"properties\": {\n        \n        \"name\": \"abcсс\",\n        \"application\": {\n          \"id\": \"{{app-mgr.last-created-uid}}\",\n          \"version\": 1\n        },\n        \"model\": {\n          \"id\": \"{{model-mgr.last-created-uid}}\",\n          \"version\": 1\n        },\n        \"pause_stream\": \"false|true\"\n      },\n      \"routes\": {\n        \"outgoing\": [\n          {\n            \"ref\": \"SomeChannel\"\n          }\n        ]\n      }\n    },\n    {\n      \"label\": \"SomeChannel\",\n      \"clss\": \"channel\",\n      \"properties\": {\n        \"name\": \"21\",\n        \"kafka_topic\": \"topic-name\"\n      }\n    },\n    {\n      \"label\": \"SomeChannel2\",\n      \"clss\": \"channel\",\n      \"properties\": {\n        \"name\": \"213\",\n        \"kafka_topic\": \"topic-name2\"\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{http-api}}/scripts/{{mnft-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts",
								"{{mnft-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete chain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cab76b1-5cef-4cc3-b695-64f6964bf667",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{user-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{http-api}}/scripts/{{mnft-mgr.last-created-uid}}",
							"host": [
								"{{http-api}}"
							],
							"path": [
								"scripts",
								"{{mnft-mgr.last-created-uid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7ff777ad-2e06-42d5-a87b-5b84324f7954",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4d8ad472-6bd9-4a4c-88cb-3cd3d0fd510c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}