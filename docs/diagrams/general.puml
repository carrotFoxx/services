@startuml

[Stream Saver] as stfs

queue "kafka:in" as kf_in
queue "kafka:out" as kf_out

[App Manager] as app_mgr

[Model Manager] as art_mgr

[Workspace Manager] as wsp_mgr
[Consul] as consul

'[Trainer Manager] as tr_mgr

[Env Manager] as env_mgr

[API Gateway] as api

database DB {
    database ModelDB as mdb
    database AppDB as appdb
    database TaskResults as resdb
}

stfs <-- kf_out
stfs -u-> resdb

storage FileShare as fs {
    artifact model
    model <.u. mdb : index points to\n file on share
}

node App <<container/vm>> {
    agent supervisor as slv
    agent calculator as calc
    () model as mi
    file stdin
    file stdout

    mi <.u. model

    slv -d-> stdin: push events
    slv <-d- stdout: read results

    slv ..> calc: run process\n using\n model\n as arg

    slv <-u- kf_in: ask for stream\n slices
    slv -u-> kf_out: push results

    calc <-u- stdin
    calc <-u- mi
    calc -u-> stdout
}


wsp_mgr <-> art_mgr: get model to map\n in container
wsp_mgr ==> consul: setup routing
consul <=- slv: adopt routing
wsp_mgr <-> app_mgr: get app's\ntype, version, etc
app_mgr <--> appdb
wsp_mgr <==> env_mgr: setup environment
env_mgr ==> App: setup container,\n mount model

art_mgr --> mdb: put/find file\n location in/to index
art_mgr ---> fs: put file on disk

'art_mgr ---> tr_mgr: train model
'tr_mgr --> env_mgr: setup env\n for training

api <-d-> wsp_mgr
api <-d-> app_mgr
api <-d-> art_mgr

@enduml
